name: Build

on:
  workflow_call:
    inputs:
      files:
        description: Newline separated list of files to build
        required: true
        type: string
      cache:
        description: Cache build directory
        required: false
        type: boolean
        default: false
      esphome-version:
        description: Version of ESPHome to build with
        required: false
        type: string
        default: latest
      release-summary:
        description: Summary of the release
        required: false
        type: string
        default: ""
      release-url:
        description: URL to the release notes
        required: false
        type: string
        default: ""
      release-version:
        description: Version of the release
        required: false
        type: string
        default: ""
      combined-name:
        description: Combine all files into a single manifest under this name
        required: false
        type: string
        default: ""
      secrets-environment:
        description: Environment to use to access secrets
        required: false
        type: string
        default: ""
      secrets-yaml-file:
        description: The secrets.yaml file as a base64 encoded string (from a secret)
        required: false
        type: string
      secrets-yaml-file-path:
        description: Location of secrets.yaml file
        required: false
        type: string
        default: "secrets.yaml"

    outputs:
      version:
        description: Version of the firmware generated
        value: ${{ jobs.prepare.outputs.version }}

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.files-array.outputs.files }}
      version: ${{ steps.version.outputs.version }}
      artifact-prefix: ${{ steps.artifact-name.outputs.artifact-prefix }}
    steps:
      - name: Split files input into JSON array
        id: files-array
        run: |
          files=$(echo "${{ inputs.files }}" | jq -RcSn '[inputs | select(length>0)]')
          echo files=$files >> $GITHUB_OUTPUT
      - name: Generate version
        id: version
        run: |
          if [ -n "${{ inputs.release-version }}" ]; then
            version=${{ inputs.release-version }}
          else
            version=dev-$(date +'%Y%m%d-%H%M')
          fi

          echo version=$version >> $GITHUB_OUTPUT
      - name: Generated random artifact prefix
        id: artifact-name
        run: |
          artifact_prefix=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 16; echo)
          echo artifact-prefix=$artifact_prefix >> $GITHUB_OUTPUT

  build:
    name: ${{ matrix.file }}
    needs: [prepare]
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.secrets-environment }}
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        file: ${{ fromJson(needs.prepare.outputs.files) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.1
      - name: Configure secrets.yaml file
        if: inputs.secrets-yaml-file != ''
        uses: akiojin/decode-base64-github-action@v1
        id: decode-base64
        with:
          base64: ${{ inputs.secrets-yaml-file }}
          output-path: ${{ inputs.secrets-yaml-file-path }}
      - run: |
          echo "Path=${{ steps.decode-base64.outputs.output-path }}"
          cat ${{ steps.decode-base64.outputs.output-path }}
#      - name: Configure secrets.yaml file
#        run: |
#          python -c "import os; import yaml; print(os.environ); secrets_data = dict(wifi_ssid=os.environ['wifi_ssid'], wifi_password=os.environ['wifi_password'], encryption_key=os.environ['encryption_key'], ota_password=os.environ['ota_password'], rufus_url=os.environ['rufus_url'], volcano_mac_address=os.environ['volcano_mac_address'], gaggia_timer_alarm_media_file_path=os.environ['gaggia_timer_alarm_media_file_path'], front_door_lock_url=os.environ['front_door_lock_url'], back_door_lock_url=os.environ['back_door_lock_url'], milanais_username=os.environ['milanais_username'], milanais_password=os.environ['milanais_password']); secrets_file = open('albionboxes/secrets.yaml', 'w'); yaml.dump(secrets_data, secrets_file, default_flow_style=False); secrets_file.close()"
#        shell: bash
#        env:
#          # FIXME: this should be more dynamic
#          wifi_ssid: ${{ secrets.WIFI_SSID }}
#          wifi_password: ${{ secrets.WIFI_PASSWORD }}
#          encryption_key: ${{ secrets.ENCRYPTION_KEY }}
#          ota_password: ${{ secrets.OTA_PASSWORD }}
#          rufus_url: ${{ secrets.RUFUS_URL }}
#          volcano_mac_address: ${{ secrets.VOLCANO_MAC_ADDRESS }}
#          gaggia_timer_alarm_media_file_path: ${{ secrets.GAGGIA_TIMER_ALARM_MEDIA_FILE_PATH }}
#          front_door_lock_url: ${{ secrets.FRONT_DOOR_LOCK_URL }}
#          back_door_lock_url: ${{ secrets.BACK_DOOR_LOCK_URL }}
#          milanais_username: ${{ secrets.MILANAIS_USERNAME }}
#          milanais_password: ${{ secrets.MILANAIS_PASSWORD }}

      - name: DEBUG echo the secrets.yaml file
        run: |
          cat albionboxes/secrets.yaml
        shell: bash
      - name: Replace project version
        run: |
          sed -i "s/version: dev/version: ${{ needs.prepare.outputs.version }}/g" ${{ matrix.file }}
      - name: Build Firmware
        uses: esphome/build-action@v4.0.3
        id: esphome-build
        with:
          yaml-file: ${{ matrix.file }}
          cache: ${{ inputs.cache }}
          version: ${{ inputs.esphome-version }}
          complete-manifest: true
          release-summary: ${{ inputs.release-summary }}
          release-url: ${{ inputs.release-url }}
      - name: Move files for versioning
        run: |
          mkdir -p output/${{ needs.prepare.outputs.version }}
          mv ${{ steps.esphome-build.outputs.name }}/* output/${{ needs.prepare.outputs.version }}/
      - name: Upload artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: ${{ inputs.combined-name != '' && format('{0}-{1}', needs.prepare.outputs.artifact-prefix, steps.esphome-build.outputs.name) || steps.esphome-build.outputs.original-name }}
          path: output

  combine:
    name: Combine manifests
    needs:
      - prepare
      - build
    runs-on: ubuntu-latest
    if: inputs.combined-name != ''
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          path: files
          pattern: ${{ needs.prepare.outputs.artifact-prefix }}-*

      - name: Get artifact names
        id: artifacts
        run: |
          artifacts=$(ls --format=single-column files)
          echo "artifacts<<EOF" >> $GITHUB_OUTPUT
          echo "$artifacts" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Delete prefixed artifacts
        uses: geekyeggo/delete-artifact@v5.0.0
        with:
          name: ${{ steps.artifacts.outputs.artifacts }}

      - name: Combine all parts into a single manifest
        run: |
          version="${{ needs.prepare.outputs.version }}"
          mkdir -p "output/$version"
          pushd files
          for device in *; do
            pushd $device
            pushd $version
            cp * "../../../output/$version/"
            popd
            popd
          done
          popd
          jq -s '(.[0] | del(.builds)) + {"builds": (reduce .[].builds as $b ([]; . + $b))}' files/*/$version/manifest.json > output/$version/manifest.json

      - name: Upload artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: ${{ inputs.combined-name }}
          path: output
