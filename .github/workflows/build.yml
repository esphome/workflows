name: Build
# This workflow is only to be used within the ESPHome organisation on GitHub.
# It is used to build and upload the binaries to Cloudflare R2 and only
# specific repositories will be granted the secrets required to do so.

on:
  workflow_call:
    inputs:
      files:
        description: Newline separated list of files to build
        required: true
        type: string
      name:
        description: Name of the firmware to publish
        required: false
        type: string
      esphome-version:
        description: Version of ESPHome to build with
        required: false
        type: string
        default: latest
      release-summary:
        description: Summary of the release
        required: false
        type: string
        default: ""
      release-url:
        description: URL to the release notes
        required: false
        type: string
        default: ""
      upload:
        description: Upload the firmware to Cloudflare R2
        required: false
        type: boolean
        default: false
      release-version:
        description: Version of the release
        required: false
        type: string
        default: ""

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.files-array.outputs.files }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Split files input into JSON array
        id: files-array
        run: |
          files=$(echo "${{ inputs.files }}" | jq -RcSn '[inputs | select(length>0)]')
          echo files=$files >> $GITHUB_OUTPUT
      - name: Generate version
        id: version
        run: |
          if [ -n "${{ inputs.release-version }}" ]; then
            version=${{ inputs.release-version }}
          elif [ "${{ inputs.upload }}" == "true" ]; then
            version=dev-$(date +'%Y%m%d-%H%M')
          else
            version=dev
          fi

          echo version=$version >> $GITHUB_OUTPUT

  build:
    name: Build ESPHome firmware for ${{ matrix.file }}
    needs: [prepare]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        file: ${{ fromJson(needs.prepare.outputs.files) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7
      - name: Replace project version
        run: |
          sed -i "s/version: dev/version: ${{ needs.prepare.outputs.version }}/g" ${{ matrix.file }}
      - name: Build Firmware
        uses: esphome/build-action@v4.0.1
        id: esphome-build
        with:
          yaml-file: ${{ matrix.file }}
          version: ${{ inputs.esphome-version }}
          complete-manifest: true
          release-summary: ${{ inputs.release-summary }}
          release-url: ${{ inputs.release-url }}
      - name: Move files for versioning
        run: |
          mkdir -p output/${{ needs.prepare.outputs.version }}
          mv ${{ steps.esphome-build.outputs.name }}/* output/${{ needs.prepare.outputs.version }}/
      - name: Upload artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: ${{ steps.esphome-build.outputs.original-name }}
          path: output

  upload:
    name: Upload firmware to Cloudflare R2
    needs:
      - prepare
      - build
    runs-on: ubuntu-latest
    if: inputs.upload
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          path: files

      - run: tree

      - name: Upload files to R2
        uses: ryand56/r2-upload-action@v1.3.2
        with:
          r2-account-id: ${{ secrets.CLOUDFLARE_R2_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
          r2-bucket: ${{ secrets.CLOUDFLARE_R2_BUCKET }}
          source-dir: files
          destination-dir: ${{ inputs.name }}/

  promote:
    name: Promote firmware to production
    needs:
      - prepare
      - upload
    runs-on: ubuntu-latest
    environment: production
    if: inputs.upload && inputs.release-version != ''
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          path: files

      - name: Copy manifest.json
        run: |
          mkdir -p output
          for device in files/*; do
            device=$(basename $device)
            mkdir -p output/$device
            jq --arg version "${{ needs.prepare.outputs.version }}" \
              '.builds[].ota.path |= $version + "/" + . | .builds[].parts[].path |= $version + "/" + .' \
              files/$device/$version/manifest.json > output/$device/manifest.json
          done

      - name: Upload files to R2
        uses: ryand56/r2-upload-action@v1.3.2
        with:
          r2-account-id: ${{ secrets.CLOUDFLARE_R2_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
          r2-bucket: ${{ secrets.CLOUDFLARE_R2_BUCKET }}
          source-dir: output
          destination-dir: ${{ inputs.name }}/
