---
name: Lock closed issues and PRs

on:
  workflow_call:
    inputs:
      pr-close-days:
        description: Number of days after which closed PRs should be locked
        required: false
        type: integer
        default: 1
      issue-close-days:
        description: Number of days after which closed issues should be locked
        required: false
        type: integer
        default: 7
      exclude-label:
        description: Label to exclude from locking
        required: false
        type: string
        default: keep-open
      lock-reason:
        description: Reason for locking the issues and PRs
        required: false
        type: string
        default: ""
      since-days:
        description: Number of days since which issues and PRs should be locked
        required: false
        type: integer
        default: 30

permissions:
  issues: write
  pull-requests: write

concurrency:
  group: lock-closed
  cancel-in-progress: false

jobs:
  lock:
    runs-on: ubuntu-latest
    steps:
      - name: Lock closed issues and PRs
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const PR_CLOSE_DAYS = ${{ inputs.pr-close-days }};
            const ISSUE_CLOSE_DAYS = ${{ inputs.issue-close-days }};
            const EXCLUDE_LABEL = "${{ inputs.exclude-label }}";
            const LOCK_REASON = "${{ inputs.lock-reason }}";
            const SINCE_DAYS = ${{ inputs.since-days }};

            const now = new Date();
            const prCutoffDate = new Date(now.getTime() - PR_CLOSE_DAYS * 24 * 60 * 60 * 1000);
            const issueCutoffDate = new Date(now.getTime() - ISSUE_CLOSE_DAYS * 24 * 60 * 60 * 1000);
            const sinceDate = new Date(now.getTime() - SINCE_DAYS * 24 * 60 * 60 * 1000);

            console.log(`Will lock PRs closed before: ${prCutoffDate.toISOString()}`);
            console.log(`Will lock issues closed before: ${issueCutoffDate.toISOString()}`);

            // The `listForRepo` endpoint fetches both issues and pull requests.
            // We fetch all closed items and filter them in the script.
            const closedItems = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              since: sinceDate.toISOString(),
            });

            for (const item of closedItems) {
              if (item.locked) continue;

              const hasExcludeLabel = item.labels.some(label => label.name === EXCLUDE_LABEL);
              if (hasExcludeLabel) continue;

              const closedAt = new Date(item.closed_at);
              const isPr = 'pull_request' in item;

              if ((isPr && closedAt < prCutoffDate) || (!isPr && closedAt < issueCutoffDate)) {
                console.log(`Locking ${isPr ? 'PR' : 'issue'} #${item.number} which was closed at ${item.closed_at}`);
                try {
                  if (LOCK_REASON) {
                    await github.rest.issues.lock({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: item.number,
                      lock_reason: LOCK_REASON,
                    });
                  } else {
                    await github.rest.issues.lock({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: item.number,
                    });
                  }
                  console.log(`Successfully locked #${item.number}.`);
                } catch (e) {
                  console.error(`Failed to lock #${item.number}: ${e.message}`);
                }
              }
            }
